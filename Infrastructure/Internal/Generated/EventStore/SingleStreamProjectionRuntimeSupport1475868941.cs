// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: SingleStreamProjectionLiveAggregation1475868941
    public class SingleStreamProjectionLiveAggregation1475868941 : Marten.Events.Aggregation.SyncLiveAggregatorBase<Seatpicker.Domain.Seat>
    {
        private readonly Marten.Events.Aggregation.SingleStreamProjection<Seatpicker.Domain.Seat> _singleStreamProjection;

        public SingleStreamProjectionLiveAggregation1475868941(Marten.Events.Aggregation.SingleStreamProjection<Seatpicker.Domain.Seat> singleStreamProjection)
        {
            _singleStreamProjection = singleStreamProjection;
        }


        public System.Func<Seatpicker.Domain.Seat> AggregateBuilder {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatCreated> Lambda1 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatReservationMade> Lambda2 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatReservationMadeFor> Lambda3 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatReservationRemoved> Lambda4 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatReservationRemovedFor> Lambda5 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatReservationMoved> Lambda6 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatReservationMovedFor> Lambda7 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatTitleChanged> Lambda8 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatBoundsChanged> Lambda9 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatArchived> Lambda10 {get; set;}


        public override Seatpicker.Domain.Seat Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, Seatpicker.Domain.Seat snapshot)
        {
            if (!events.Any()) return null;
            Seatpicker.Domain.Seat seat = null;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public Seatpicker.Domain.Seat Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }


        public Seatpicker.Domain.Seat CreateDefault(Marten.Events.IEvent @event)
        {
            return AggregateBuilder();
        }


        public Seatpicker.Domain.Seat Apply(Marten.Events.IEvent @event, Seatpicker.Domain.Seat aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Seatpicker.Domain.SeatCreated> event_SeatCreated1:
                    Lambda1.Invoke(aggregate, event_SeatCreated1.Data);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMade> event_SeatReservationMade2:
                    Lambda2.Invoke(aggregate, event_SeatReservationMade2.Data);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMadeFor> event_SeatReservationMadeFor3:
                    Lambda3.Invoke(aggregate, event_SeatReservationMadeFor3.Data);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationRemoved> event_SeatReservationRemoved4:
                    Lambda4.Invoke(aggregate, event_SeatReservationRemoved4.Data);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationRemovedFor> event_SeatReservationRemovedFor5:
                    Lambda5.Invoke(aggregate, event_SeatReservationRemovedFor5.Data);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMoved> event_SeatReservationMoved6:
                    Lambda6.Invoke(aggregate, event_SeatReservationMoved6.Data);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMovedFor> event_SeatReservationMovedFor7:
                    Lambda7.Invoke(aggregate, event_SeatReservationMovedFor7.Data);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatTitleChanged> event_SeatTitleChanged8:
                    Lambda8.Invoke(aggregate, event_SeatTitleChanged8.Data);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatBoundsChanged> event_SeatBoundsChanged9:
                    Lambda9.Invoke(aggregate, event_SeatBoundsChanged9.Data);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatArchived> event_SeatArchived10:
                    Lambda10.Invoke(aggregate, event_SeatArchived10.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: SingleStreamProjectionLiveAggregation1475868941
    
    
    // START: SingleStreamProjectionInlineHandler1475868941
    public class SingleStreamProjectionInlineHandler1475868941 : Marten.Events.Aggregation.AggregationRuntime<Seatpicker.Domain.Seat, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<Seatpicker.Domain.Seat, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<Seatpicker.Domain.Seat, System.Guid> _storage;
        private readonly Marten.Events.Aggregation.SingleStreamProjection<Seatpicker.Domain.Seat> _singleStreamProjection;

        public SingleStreamProjectionInlineHandler1475868941(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<Seatpicker.Domain.Seat, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<Seatpicker.Domain.Seat, System.Guid> storage, Marten.Events.Aggregation.SingleStreamProjection<Seatpicker.Domain.Seat> singleStreamProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _singleStreamProjection = singleStreamProjection;
        }


        public System.Func<Seatpicker.Domain.Seat> AggregateBuilder {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatCreated> Lambda1 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatReservationMade> Lambda2 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatReservationMadeFor> Lambda3 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatReservationRemoved> Lambda4 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatReservationRemovedFor> Lambda5 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatReservationMoved> Lambda6 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatReservationMovedFor> Lambda7 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatTitleChanged> Lambda8 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatBoundsChanged> Lambda9 {get; set;}

        public System.Action<Seatpicker.Domain.Seat, Seatpicker.Domain.SeatArchived> Lambda10 {get; set;}


        public override async System.Threading.Tasks.ValueTask<Seatpicker.Domain.Seat> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<Seatpicker.Domain.Seat, System.Guid> slice, Marten.Events.IEvent evt, Seatpicker.Domain.Seat aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMade> event_SeatReservationMade12:
                    aggregate ??= AggregateBuilder();
                    Lambda2.Invoke(aggregate, event_SeatReservationMade12.Data);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMadeFor> event_SeatReservationMadeFor13:
                    aggregate ??= AggregateBuilder();
                    Lambda3.Invoke(aggregate, event_SeatReservationMadeFor13.Data);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationRemoved> event_SeatReservationRemoved14:
                    aggregate ??= AggregateBuilder();
                    Lambda4.Invoke(aggregate, event_SeatReservationRemoved14.Data);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatCreated> event_SeatCreated11:
                    aggregate ??= AggregateBuilder();
                    Lambda1.Invoke(aggregate, event_SeatCreated11.Data);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationRemovedFor> event_SeatReservationRemovedFor15:
                    aggregate ??= AggregateBuilder();
                    Lambda5.Invoke(aggregate, event_SeatReservationRemovedFor15.Data);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatBoundsChanged> event_SeatBoundsChanged19:
                    aggregate ??= AggregateBuilder();
                    Lambda9.Invoke(aggregate, event_SeatBoundsChanged19.Data);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMovedFor> event_SeatReservationMovedFor17:
                    aggregate ??= AggregateBuilder();
                    Lambda7.Invoke(aggregate, event_SeatReservationMovedFor17.Data);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMoved> event_SeatReservationMoved16:
                    aggregate ??= AggregateBuilder();
                    Lambda6.Invoke(aggregate, event_SeatReservationMoved16.Data);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatTitleChanged> event_SeatTitleChanged18:
                    aggregate ??= AggregateBuilder();
                    Lambda8.Invoke(aggregate, event_SeatTitleChanged18.Data);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatArchived> event_SeatArchived20:
                    aggregate ??= AggregateBuilder();
                    Lambda10.Invoke(aggregate, event_SeatArchived20.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public Seatpicker.Domain.Seat Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return null;
        }


        public Seatpicker.Domain.Seat CreateDefault(Marten.Events.IEvent @event)
        {
            return AggregateBuilder();
        }

    }

    // END: SingleStreamProjectionInlineHandler1475868941
    
    
}

