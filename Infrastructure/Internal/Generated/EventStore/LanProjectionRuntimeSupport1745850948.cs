// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using Seatpicker.Application.Features.Lans;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: LanProjectionLiveAggregation1745850948
    public class LanProjectionLiveAggregation1745850948 : Marten.Events.Aggregation.SyncLiveAggregatorBase<Seatpicker.Application.Features.Lans.ProjectedLan>
    {
        private readonly Seatpicker.Application.Features.Lans.LanProjection _lanProjection;

        public LanProjectionLiveAggregation1745850948(Seatpicker.Application.Features.Lans.LanProjection lanProjection)
        {
            _lanProjection = lanProjection;
        }



        public override Seatpicker.Application.Features.Lans.ProjectedLan Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, Seatpicker.Application.Features.Lans.ProjectedLan snapshot)
        {
            if (!events.Any()) return null;
            Seatpicker.Application.Features.Lans.ProjectedLan projectedLan = null;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public Seatpicker.Application.Features.Lans.ProjectedLan Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Seatpicker.Domain.LanCreated> event_LanCreated21:
                    return _lanProjection.Create(event_LanCreated21);
                    break;
            }

            return null;
        }


        public Seatpicker.Application.Features.Lans.ProjectedLan CreateDefault(Marten.Events.IEvent @event)
        {
            throw new System.InvalidOperationException($"There is no default constructor for Seatpicker.Application.Features.Lans.ProjectedLan or Create method for {@event.DotNetTypeName} event type.Check more about the create method convention in documentation: https://martendb.io/events/projections/event-projections.html#create-method-convention. If you're using Upcasting, check if {@event.DotNetTypeName} is an old event type. If it is, make sure to define transformation for it to new event type. Read more in Upcasting docs: https://martendb.io/events/versioning.html#upcasting-advanced-payload-transformations.");
        }


        public Seatpicker.Application.Features.Lans.ProjectedLan Apply(Marten.Events.IEvent @event, Seatpicker.Application.Features.Lans.ProjectedLan aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Seatpicker.Domain.LanBackgroundChanged> event_LanBackgroundChanged22:
                    _lanProjection.Apply(event_LanBackgroundChanged22, aggregate);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.LanTitleChanged> event_LanTitleChanged23:
                    _lanProjection.Apply(event_LanTitleChanged23, aggregate);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.LanActiveChanged> event_LanActiveChanged24:
                    _lanProjection.Apply(event_LanActiveChanged24, aggregate);
                    break;
            }

            return aggregate;
        }

    }

    // END: LanProjectionLiveAggregation1745850948
    
    
    // START: LanProjectionInlineHandler1745850948
    public class LanProjectionInlineHandler1745850948 : Marten.Events.Aggregation.AggregationRuntime<Seatpicker.Application.Features.Lans.ProjectedLan, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<Seatpicker.Application.Features.Lans.ProjectedLan, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<Seatpicker.Application.Features.Lans.ProjectedLan, System.Guid> _storage;
        private readonly Seatpicker.Application.Features.Lans.LanProjection _lanProjection;

        public LanProjectionInlineHandler1745850948(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<Seatpicker.Application.Features.Lans.ProjectedLan, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<Seatpicker.Application.Features.Lans.ProjectedLan, System.Guid> storage, Seatpicker.Application.Features.Lans.LanProjection lanProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _lanProjection = lanProjection;
        }



        public override async System.Threading.Tasks.ValueTask<Seatpicker.Application.Features.Lans.ProjectedLan> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<Seatpicker.Application.Features.Lans.ProjectedLan, System.Guid> slice, Marten.Events.IEvent evt, Seatpicker.Application.Features.Lans.ProjectedLan aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<Seatpicker.Domain.LanTitleChanged> event_LanTitleChanged28:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Seatpicker.Application.Features.Lans.ProjectedLan should either have a static Create method that returns the event type Marten.Events.IEvent<Seatpicker.Domain.LanTitleChanged> or Seatpicker.Application.Features.Lans.ProjectedLan should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Seatpicker.Domain.LanTitleChanged> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    _lanProjection.Apply(event_LanTitleChanged28, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.LanArchived> event_LanArchived26:
                    return null;
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.LanActiveChanged> event_LanActiveChanged29:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Seatpicker.Application.Features.Lans.ProjectedLan should either have a static Create method that returns the event type Marten.Events.IEvent<Seatpicker.Domain.LanActiveChanged> or Seatpicker.Application.Features.Lans.ProjectedLan should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Seatpicker.Domain.LanActiveChanged> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    _lanProjection.Apply(event_LanActiveChanged29, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.LanCreated> event_LanCreated30:
                    aggregate = _lanProjection.Create(event_LanCreated30);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.LanBackgroundChanged> event_LanBackgroundChanged27:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Seatpicker.Application.Features.Lans.ProjectedLan should either have a static Create method that returns the event type Marten.Events.IEvent<Seatpicker.Domain.LanBackgroundChanged> or Seatpicker.Application.Features.Lans.ProjectedLan should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Seatpicker.Domain.LanBackgroundChanged> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    _lanProjection.Apply(event_LanBackgroundChanged27, aggregate);
                    return aggregate;
            }

            return aggregate;
        }


        public Seatpicker.Application.Features.Lans.ProjectedLan Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Seatpicker.Domain.LanCreated> event_LanCreated25:
                    return _lanProjection.Create(event_LanCreated25);
                    break;
            }

            return null;
        }


        public Seatpicker.Application.Features.Lans.ProjectedLan CreateDefault(Marten.Events.IEvent @event)
        {
            throw new System.InvalidOperationException($"There is no default constructor for Seatpicker.Application.Features.Lans.ProjectedLan or Create method for {@event.DotNetTypeName} event type.Check more about the create method convention in documentation: https://martendb.io/events/projections/event-projections.html#create-method-convention. If you're using Upcasting, check if {@event.DotNetTypeName} is an old event type. If it is, make sure to define transformation for it to new event type. Read more in Upcasting docs: https://martendb.io/events/versioning.html#upcasting-advanced-payload-transformations.");
        }

    }

    // END: LanProjectionInlineHandler1745850948
    
    
}

