// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using Seatpicker.Application.Features.Seats;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: SeatProjectionLiveAggregation160932676
    public class SeatProjectionLiveAggregation160932676 : Marten.Events.Aggregation.SyncLiveAggregatorBase<Seatpicker.Application.Features.Seats.ProjectedSeat>
    {
        private readonly Seatpicker.Application.Features.Seats.SeatProjection _seatProjection;

        public SeatProjectionLiveAggregation160932676(Seatpicker.Application.Features.Seats.SeatProjection seatProjection)
        {
            _seatProjection = seatProjection;
        }



        public override Seatpicker.Application.Features.Seats.ProjectedSeat Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, Seatpicker.Application.Features.Seats.ProjectedSeat snapshot)
        {
            if (!events.Any()) return null;
            Seatpicker.Application.Features.Seats.ProjectedSeat projectedSeat = null;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public Seatpicker.Application.Features.Seats.ProjectedSeat Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Seatpicker.Domain.SeatCreated> event_SeatCreated31:
                    return _seatProjection.Create(event_SeatCreated31.Data);
                    break;
            }

            return null;
        }


        public Seatpicker.Application.Features.Seats.ProjectedSeat CreateDefault(Marten.Events.IEvent @event)
        {
            throw new System.InvalidOperationException($"There is no default constructor for Seatpicker.Application.Features.Seats.ProjectedSeat or Create method for {@event.DotNetTypeName} event type.Check more about the create method convention in documentation: https://martendb.io/events/projections/event-projections.html#create-method-convention. If you're using Upcasting, check if {@event.DotNetTypeName} is an old event type. If it is, make sure to define transformation for it to new event type. Read more in Upcasting docs: https://martendb.io/events/versioning.html#upcasting-advanced-payload-transformations.");
        }


        public Seatpicker.Application.Features.Seats.ProjectedSeat Apply(Marten.Events.IEvent @event, Seatpicker.Application.Features.Seats.ProjectedSeat aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMade> event_SeatReservationMade32:
                    _seatProjection.Apply(event_SeatReservationMade32.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMadeFor> event_SeatReservationMadeFor33:
                    _seatProjection.Apply(event_SeatReservationMadeFor33.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationRemoved> event_SeatReservationRemoved34:
                    _seatProjection.Apply(event_SeatReservationRemoved34.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationRemovedFor> event_SeatReservationRemovedFor35:
                    _seatProjection.Apply(event_SeatReservationRemovedFor35.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMoved> event_SeatReservationMoved36:
                    _seatProjection.Apply(event_SeatReservationMoved36.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMovedFor> event_SeatReservationMovedFor37:
                    _seatProjection.Apply(event_SeatReservationMovedFor37.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatTitleChanged> event_SeatTitleChanged38:
                    _seatProjection.Apply(event_SeatTitleChanged38.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatBoundsChanged> event_SeatBoundsChanged39:
                    _seatProjection.Apply(event_SeatBoundsChanged39.Data, aggregate);
                    break;
            }

            return aggregate;
        }

    }

    // END: SeatProjectionLiveAggregation160932676
    
    
    // START: SeatProjectionInlineHandler160932676
    public class SeatProjectionInlineHandler160932676 : Marten.Events.Aggregation.AggregationRuntime<Seatpicker.Application.Features.Seats.ProjectedSeat, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<Seatpicker.Application.Features.Seats.ProjectedSeat, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<Seatpicker.Application.Features.Seats.ProjectedSeat, System.Guid> _storage;
        private readonly Seatpicker.Application.Features.Seats.SeatProjection _seatProjection;

        public SeatProjectionInlineHandler160932676(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<Seatpicker.Application.Features.Seats.ProjectedSeat, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<Seatpicker.Application.Features.Seats.ProjectedSeat, System.Guid> storage, Seatpicker.Application.Features.Seats.SeatProjection seatProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _seatProjection = seatProjection;
        }



        public override async System.Threading.Tasks.ValueTask<Seatpicker.Application.Features.Seats.ProjectedSeat> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<Seatpicker.Application.Features.Seats.ProjectedSeat, System.Guid> slice, Marten.Events.IEvent evt, Seatpicker.Application.Features.Seats.ProjectedSeat aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMade> event_SeatReservationMade42:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Seatpicker.Application.Features.Seats.ProjectedSeat should either have a static Create method that returns the event type Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMade> or Seatpicker.Application.Features.Seats.ProjectedSeat should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMade> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    _seatProjection.Apply(event_SeatReservationMade42.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMadeFor> event_SeatReservationMadeFor43:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Seatpicker.Application.Features.Seats.ProjectedSeat should either have a static Create method that returns the event type Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMadeFor> or Seatpicker.Application.Features.Seats.ProjectedSeat should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMadeFor> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    _seatProjection.Apply(event_SeatReservationMadeFor43.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationRemoved> event_SeatReservationRemoved44:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Seatpicker.Application.Features.Seats.ProjectedSeat should either have a static Create method that returns the event type Marten.Events.IEvent<Seatpicker.Domain.SeatReservationRemoved> or Seatpicker.Application.Features.Seats.ProjectedSeat should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Seatpicker.Domain.SeatReservationRemoved> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    _seatProjection.Apply(event_SeatReservationRemoved44.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatCreated> event_SeatCreated50:
                    aggregate = _seatProjection.Create(event_SeatCreated50.Data);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationRemovedFor> event_SeatReservationRemovedFor45:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Seatpicker.Application.Features.Seats.ProjectedSeat should either have a static Create method that returns the event type Marten.Events.IEvent<Seatpicker.Domain.SeatReservationRemovedFor> or Seatpicker.Application.Features.Seats.ProjectedSeat should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Seatpicker.Domain.SeatReservationRemovedFor> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    _seatProjection.Apply(event_SeatReservationRemovedFor45.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatBoundsChanged> event_SeatBoundsChanged49:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Seatpicker.Application.Features.Seats.ProjectedSeat should either have a static Create method that returns the event type Marten.Events.IEvent<Seatpicker.Domain.SeatBoundsChanged> or Seatpicker.Application.Features.Seats.ProjectedSeat should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Seatpicker.Domain.SeatBoundsChanged> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    _seatProjection.Apply(event_SeatBoundsChanged49.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMovedFor> event_SeatReservationMovedFor47:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Seatpicker.Application.Features.Seats.ProjectedSeat should either have a static Create method that returns the event type Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMovedFor> or Seatpicker.Application.Features.Seats.ProjectedSeat should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMovedFor> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    _seatProjection.Apply(event_SeatReservationMovedFor47.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMoved> event_SeatReservationMoved46:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Seatpicker.Application.Features.Seats.ProjectedSeat should either have a static Create method that returns the event type Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMoved> or Seatpicker.Application.Features.Seats.ProjectedSeat should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Seatpicker.Domain.SeatReservationMoved> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    _seatProjection.Apply(event_SeatReservationMoved46.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatTitleChanged> event_SeatTitleChanged48:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Seatpicker.Application.Features.Seats.ProjectedSeat should either have a static Create method that returns the event type Marten.Events.IEvent<Seatpicker.Domain.SeatTitleChanged> or Seatpicker.Application.Features.Seats.ProjectedSeat should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Seatpicker.Domain.SeatTitleChanged> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    _seatProjection.Apply(event_SeatTitleChanged48.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Seatpicker.Domain.SeatArchived> event_SeatArchived41:
                    return null;
                    return aggregate;
            }

            return aggregate;
        }


        public Seatpicker.Application.Features.Seats.ProjectedSeat Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Seatpicker.Domain.SeatCreated> event_SeatCreated40:
                    return _seatProjection.Create(event_SeatCreated40.Data);
                    break;
            }

            return null;
        }


        public Seatpicker.Application.Features.Seats.ProjectedSeat CreateDefault(Marten.Events.IEvent @event)
        {
            throw new System.InvalidOperationException($"There is no default constructor for Seatpicker.Application.Features.Seats.ProjectedSeat or Create method for {@event.DotNetTypeName} event type.Check more about the create method convention in documentation: https://martendb.io/events/projections/event-projections.html#create-method-convention. If you're using Upcasting, check if {@event.DotNetTypeName} is an old event type. If it is, make sure to define transformation for it to new event type. Read more in Upcasting docs: https://martendb.io/events/versioning.html#upcasting-advanced-payload-transformations.");
        }

    }

    // END: SeatProjectionInlineHandler160932676
    
    
}

